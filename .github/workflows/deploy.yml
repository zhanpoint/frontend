name: Deploy Frontend to Aliyun Server

# 触发条件：当代码被推送到 main 分支时
on:
  push:
    branches:
      - main

# 定义一个名为 'deploy' 的任务
jobs:
  deploy:
    # 优化1: 明确指定与服务器匹配的操作系统版本，避免因 'latest' 标签更新导致的问题
    runs-on: ubuntu-22.04

    steps:
      # 检出代码，以便 Actions 可以访问它（虽然此工作流中不直接使用）
      - name: Checkout repository
        uses: actions/checkout@v4

      # 通过 SSH 连接到服务器并执行高效的部署脚本
      - name: Deploy Frontend and Restart Services
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # 任何命令失败则立即退出
            set -e

            echo "=== 前端部署流程开始 @ $(date) ==="
            echo "目标服务器: ${{ secrets.SERVER_HOST }}"
            
            # 进入项目根目录
            cd ${{ secrets.PROJECT_PATH }}
            
            echo "=> 正在更新前端仓库..."
            cd frontend && git pull origin main && cd ..

            echo "=> 使用 Docker Compose 智能更新服务 (由前端触发)..."
            # Docker Compose 会检测到 frontend 目录内容已更改
            # 这将触发 Nginx 镜像的重新构建，因为它依赖于前端构建产物
            # 然后 Docker Compose 会平滑地重启 Nginx 容器
            sudo docker-compose up --build -d --remove-orphans

            echo "=> 部署命令执行完毕，检查容器状态..."
            sudo docker-compose ps
            
            echo "=> 清理无用的 Docker 镜像以释放磁盘空间..."
            sudo docker image prune -f

            echo "=== 前端部署成功完成 @ $(date) ===" 